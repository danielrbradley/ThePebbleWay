h1. Do 

* Use simplicity as the primary metric when evaluating competing options
* Write self explanatory code
* Write readable unit tests
* Automate repetitive tasks

h2. Documentation

* Document all major design decisions - [one possible approach](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions)
* Add a single sentence XML code comment to the top of classes you write or touch
** Being forced to describe the single responsibility of a class can be a useful design aid
* Keep high level diagrams up to date
* Add a project level README.md to explain the role of a project
* Ensure that acceptance criteria are clearly identified before starting work on a story

h2. Reviews 

* Do Get a code review when you think you've finished implementation
* Guide reviews using SOLID principles
* Start reviews with unit tests
** Lack of unit tests is an immediate failure of the review
** A reviewer should be able to infer the single responsibility of a class from the test suite

h2. Build/Deploy

* Keep the build green at all costs
** Panic when the build goes red - establish who is working to resolve the issue
* Prioritise fixing the build over finishing a story
* Treat build/deploy scripts as first class citizens
** The same rules and standards you apply to code apply to your scripts

h1. Consider

* Backing out changes that break the build
* Pursuing a functional approach - immutable types, "pure functions":http://en.wikipedia.org/wiki/Pure_function etc
* Asking for a design review at any point of working on a story
* Adding smoketests to validate components

h1. Avoid

* Complex solutions
** Only ignore this recommendation if the benefits are demonstrably overwhelming
* Constructing invalid objects
* Extensive usage of stubs and mocks in unit test setup
* Mutable objects

h1. Don't

* Disable any automated tests
* Be fooled by self explanatory easy to read code - it isn't necessarily SOLID
* Test multiple scenarios in a single unit test
* Repeat yourself!
